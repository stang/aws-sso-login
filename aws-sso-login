#!/bin/bash
set -eu

#
# This script:
#   - runs the 'aws sso login'
#   - extracts the short-lived access keys from the AWS CLI v2 format and save them in ~/.aws/credentials
#

AWS2_CLI_CREDENTIALS_CACHE_DIR="${HOME}/.aws/cli/cache"

AWS_SSO_DEFAULT_PROFILE=${AWS_SSO_DEFAULT_PROFILE:-default}
# support '--profile' arg as the 'aws' cli does
while [[ $# -gt 0 ]]; do
  case "$1" in
    --profile) AWS_PROFILE_FROM_CLI="${2?:AWS_PROFILE must be provided with $1 option}"; break; ;;
    *) shift;; # we're only interested by the inventory
  esac
done

# use profile set from either the CLI args, the AWS_PROFILE environment variable or the AWS_SSO_DEFAULT_PROFILE environment variable
AWS_PROFILE="${AWS_PROFILE_FROM_CLI:-${AWS_PROFILE:-${AWS_SSO_DEFAULT_PROFILE}}}"

# #FIXME: since 'aws sso login' does not update the cache files when they're still valid, there were an edge case
# where running 'aws-sso-login' multiple times on the same account, with an intermediary account in between would
# not work correctly (ie: because we fetch the cached credentials based on the mtime of the .aws/cli/cache files)
# As a workaround, I'm deleting all those cached files before running 'aws sso login' so we ensure that there will
# always be a single file in .aws/cli/cache, and it always match the current profile we're trying to login as.
rm -f ${AWS2_CLI_CREDENTIALS_CACHE_DIR}/*.json

# #TODO: 'no-op' when credentials are already valid
echo "Using AWS profile '${AWS_PROFILE}' to perform SSO login"
aws sso login --profile "${AWS_PROFILE}"

# the cli/cache/*.json file seem to be created only after we make an API call
aws sts get-caller-identity  --profile "${AWS_PROFILE}" &>/dev/null

# identify where the short-lived credentials are stored
# #FIXME: for now, we assume that the latest file created is THE one. It works but that feels flimsy.
# shellcheck disable=SC2012
AWS2_CLI_CREDENTIALS_FILE="$(ls -t1 "${AWS2_CLI_CREDENTIALS_CACHE_DIR}/" | head -n1)"
AWS2_CLI_CREDENTIALS="${AWS2_CLI_CREDENTIALS_CACHE_DIR}/${AWS2_CLI_CREDENTIALS_FILE}"

# re-inject the short-lived credentials within ~/.aws/credentials
aws configure set --profile "${AWS_PROFILE}" aws_access_key_id "$(jq -r '.Credentials.AccessKeyId' <"${AWS2_CLI_CREDENTIALS}")"
aws configure set --profile "${AWS_PROFILE}" aws_secret_access_key "$(jq -r '.Credentials.SecretAccessKey' <"${AWS2_CLI_CREDENTIALS}")"
aws configure set --profile "${AWS_PROFILE}" aws_session_token "$(jq -r '.Credentials.SessionToken' <"${AWS2_CLI_CREDENTIALS}")"
